%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Thursday, November 29, 2012 9:13:17 AM MST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
3.00000 w
7.76653 5.19490E-3 382.228 388.994 rc
newpath
361.431 4.00518 m
375.467 39.7280 l
376.815 30.2076 l
368.042 33.7799 l
375.467 39.7280 l
S
newpath
322.468 6.78363 m
338.844 36.9495 l
339.002 28.3346 l
331.594 32.5022 l
338.844 36.9495 l
S
newpath
325.198 46.4490 m
336.115 74.2334 l
337.163 66.8287 l
330.339 69.6072 l
336.115 74.2334 l
S
newpath
364.160 43.6706 m
372.738 77.0119 l
374.975 68.7017 l
366.787 70.8848 l
372.738 77.0119 l
S
newpath
372.348 162.666 m
364.550 188.863 l
369.455 184.184 l
363.022 182.199 l
364.550 188.863 l
S
newpath
333.385 165.445 m
327.927 186.085 l
331.643 182.311 l
326.574 180.921 l
327.927 186.085 l
S
newpath
330.656 125.779 m
330.656 148.801 l
333.483 143.817 l
327.829 143.817 l
330.656 148.801 l
S
newpath
369.619 123.001 m
367.280 151.579 l
371.295 145.690 l
364.277 145.094 l
367.280 151.579 l
S
newpath
244.543 12.3405 m
265.597 31.3926 l
263.378 24.5885 l
258.699 29.9469 l
265.597 31.3926 l
S
newpath
247.272 52.0059 m
262.868 68.6766 l
261.538 63.0826 l
257.444 67.0518 l
262.868 68.6766 l
S
newpath
205.580 15.1189 m
228.973 28.6142 l
225.566 22.7155 l
222.252 28.6693 l
228.973 28.6142 l
S
newpath
208.309 54.7843 m
226.244 65.8981 l
223.726 61.2096 l
220.997 65.7742 l
226.244 65.8981 l
S
newpath
252.731 131.336 m
257.409 143.244 l
257.858 140.071 l
254.934 141.261 l
257.409 143.244 l
S
newpath
255.460 171.002 m
254.680 180.528 l
256.018 178.565 l
253.679 178.366 l
254.680 180.528 l
S
newpath
213.768 134.115 m
220.786 140.465 l
220.046 138.197 l
218.487 139.984 l
220.786 140.465 l
S
newpath
216.497 173.780 m
218.056 177.749 l
218.206 176.692 l
217.231 177.089 l
218.056 177.749 l
S
newpath
211.039 94.4498 m
223.515 103.182 l
221.886 99.7037 l
219.742 102.879 l
223.515 103.182 l
S
newpath
250.001 91.6713 m
260.138 105.960 l
259.698 101.576 l
256.189 104.156 l
260.138 105.960 l
S
newpath
294.423 168.223 m
291.303 183.306 l
293.831 180.438 l
290.127 179.644 l
291.303 183.306 l
S
newpath
291.693 128.558 m
294.033 146.022 l
295.671 141.944 l
291.382 142.539 l
294.033 146.022 l
S
newpath
288.964 88.8929 m
296.762 108.738 l
297.510 103.449 l
292.637 105.434 l
296.762 108.738 l
S
newpath
286.235 49.2274 m
299.491 71.4550 l
299.350 64.9557 l
293.892 68.3295 l
299.491 71.4550 l
S
newpath
283.506 9.56207 m
302.220 34.1711 l
301.190 26.4616 l
295.147 31.2246 l
302.220 34.1711 l
S
newpath
327.927 86.1144 m
333.385 111.517 l
335.323 105.322 l
329.084 106.712 l
333.385 111.517 l
S
newpath
366.890 83.3360 m
370.009 114.295 l
373.135 107.195 l
365.532 107.989 l
370.009 114.295 l
S
newpath
375.077 202.332 m
361.821 226.147 l
367.615 222.678 l
361.767 219.304 l
361.821 226.147 l
S
newpath
336.115 205.110 m
325.198 223.369 l
329.803 220.805 l
325.319 218.026 l
325.198 223.369 l
S
newpath
338.844 244.776 m
322.468 260.653 l
327.963 259.299 l
324.064 255.131 l
322.468 260.653 l
S
newpath
377.807 241.997 m
359.092 263.431 l
365.776 261.172 l
360.512 256.409 l
359.092 263.431 l
S
newpath
383.265 321.328 m
353.633 337.999 l
362.096 338.160 l
358.002 330.619 l
353.633 337.999 l
S
newpath
385.994 360.994 m
350.904 375.283 l
360.256 376.654 l
356.747 367.724 l
350.904 375.283 l
S
newpath
347.031 363.772 m
314.281 372.504 l
322.444 374.781 l
320.299 366.446 l
314.281 372.504 l
S
newpath
344.302 324.107 m
317.010 335.220 l
324.284 336.287 l
321.554 329.341 l
317.010 335.220 l
S
newpath
258.189 210.667 m
251.951 217.812 l
254.179 217.059 l
252.424 215.471 l
251.951 217.812 l
S
newpath
260.918 250.333 m
249.222 255.096 l
252.339 255.553 l
251.169 252.576 l
249.222 255.096 l
S
newpath
219.226 213.446 m
215.327 215.033 l
216.366 215.186 l
215.976 214.193 l
215.327 215.033 l
S
newpath
221.955 253.111 m
212.598 252.317 l
214.527 253.680 l
214.721 251.298 l
212.598 252.317 l
S
newpath
266.377 329.663 m
243.763 329.663 l
248.659 332.541 l
248.659 326.786 l
243.763 329.663 l
S
newpath
227.414 332.442 m
207.140 326.885 l
210.847 330.668 l
212.211 325.508 l
207.140 326.885 l
S
newpath
230.143 372.107 m
204.410 364.169 l
209.007 369.162 l
210.956 362.613 l
204.410 364.169 l
S
newpath
269.106 369.329 m
241.034 366.947 l
246.819 371.035 l
247.404 363.891 l
241.034 366.947 l
S
newpath
224.685 292.776 m
209.869 289.601 l
212.687 292.174 l
213.466 288.403 l
209.869 289.601 l
S
newpath
263.647 289.998 m
246.492 292.380 l
250.499 294.047 l
249.914 289.681 l
246.492 292.380 l
S
newpath
308.069 366.550 m
277.657 369.726 l
284.631 372.908 l
283.852 365.168 l
277.657 369.726 l
S
newpath
305.339 326.885 m
280.387 332.442 l
286.471 334.414 l
285.107 328.063 l
280.387 332.442 l
S
newpath
302.610 287.220 m
283.116 295.158 l
288.311 295.920 l
286.362 290.959 l
283.116 295.158 l
S
newpath
299.881 247.554 m
285.845 257.874 l
290.151 257.426 l
287.617 253.854 l
285.845 257.874 l
S
newpath
297.152 207.889 m
288.574 220.590 l
291.991 218.932 l
288.872 216.749 l
288.574 220.590 l
S
newpath
341.573 284.441 m
319.739 297.936 l
326.123 297.793 l
322.809 292.236 l
319.739 297.936 l
S
newpath
380.536 281.663 m
356.363 300.715 l
363.936 299.666 l
359.257 293.514 l
356.363 300.715 l
S
newpath
166.617 17.8974 m
192.350 25.8358 l
187.753 20.8425 l
185.804 27.3916 l
192.350 25.8358 l
S
newpath
169.346 57.5628 m
189.621 63.1196 l
185.914 59.3366 l
184.549 64.4965 l
189.621 63.1196 l
S
newpath
130.384 60.3412 m
152.997 60.3412 l
148.101 57.4635 l
148.101 63.2189 l
152.997 60.3412 l
S
newpath
127.654 20.6758 m
155.726 23.0573 l
149.941 18.9694 l
149.356 26.1140 l
155.726 23.0573 l
S
newpath
174.805 136.893 m
184.162 137.687 l
182.234 136.324 l
182.039 138.706 l
184.162 137.687 l
S
newpath
177.534 176.559 m
181.433 174.971 l
180.394 174.819 l
180.784 175.811 l
181.433 174.971 l
S
newpath
138.571 179.337 m
144.810 172.193 l
142.582 172.946 l
144.336 174.533 l
144.810 172.193 l
S
newpath
99.6090 182.116 m
108.186 169.414 l
104.769 171.073 l
107.889 173.256 l
108.186 169.414 l
S
newpath
135.842 139.672 m
147.539 134.909 l
144.422 134.451 l
145.591 137.428 l
147.539 134.909 l
S
newpath
49.7293 26.2327 m
82.4800 17.5004 l
74.3171 15.2233 l
76.4614 23.5587 l
82.4800 17.5004 l
S
newpath
52.4585 65.8981 m
79.7508 54.7843 l
72.4772 53.7175 l
75.2064 60.6636 l
79.7508 54.7843 l
S
newpath
10.7665 29.0111 m
45.8565 14.7220 l
36.5048 13.3503 l
40.0138 22.2810 l
45.8565 14.7220 l
S
newpath
13.4957 68.6766 m
43.1273 52.0059 l
34.6650 51.8445 l
38.7588 59.3859 l
43.1273 52.0059 l
S
newpath
57.9170 145.229 m
74.2923 129.352 l
68.7975 130.705 l
72.6964 134.873 l
74.2923 129.352 l
S
newpath
60.6462 184.894 m
71.5631 166.636 l
66.9576 169.199 l
71.4414 171.978 l
71.5631 166.636 l
S
newpath
21.6834 187.672 m
34.9396 163.857 l
29.1454 167.326 l
34.9937 170.700 l
34.9396 163.857 l
S
newpath
18.9542 148.007 m
37.6688 126.573 l
30.9852 128.832 l
36.2487 133.595 l
37.6688 126.573 l
S
newpath
16.2249 108.342 m
40.3981 89.2898 l
32.8251 90.3386 l
37.5038 96.4909 l
40.3981 89.2898 l
S
newpath
55.1877 105.563 m
77.0215 92.0682 l
70.6373 92.2116 l
73.9514 97.7685 l
77.0215 92.0682 l
S
newpath
96.8798 142.450 m
110.915 132.130 l
106.609 132.578 l
109.144 136.151 l
110.915 132.130 l
S
newpath
94.1505 102.785 m
113.645 94.8467 l
108.449 94.0846 l
110.399 99.0462 l
113.645 94.8467 l
S
newpath
91.4213 63.1196 m
116.374 57.5628 l
110.289 55.5905 l
111.654 61.9412 l
116.374 57.5628 l
S
newpath
88.6921 23.4542 m
119.103 20.2789 l
112.129 17.0964 l
112.909 24.8363 l
119.103 20.2789 l
S
newpath
133.113 100.006 m
150.268 97.6251 l
146.261 95.9577 l
146.846 100.323 l
150.268 97.6251 l
S
newpath
172.076 97.2282 m
186.892 100.403 l
184.074 97.8307 l
183.294 101.601 l
186.892 100.403 l
S
newpath
180.263 216.224 m
178.704 212.255 l
178.554 213.313 l
179.529 212.916 l
178.704 212.255 l
S
newpath
182.993 255.890 m
175.975 249.539 l
176.714 251.807 l
178.274 250.021 l
175.975 249.539 l
S
newpath
102.338 221.781 m
105.457 206.698 l
102.930 209.567 l
106.634 210.360 l
105.457 206.698 l
S
newpath
141.301 219.003 m
142.080 209.476 l
140.742 211.440 l
143.081 211.638 l
142.080 209.476 l
S
newpath
144.030 258.668 m
139.351 246.760 l
138.902 249.934 l
141.826 248.743 l
139.351 246.760 l
S
newpath
105.067 261.446 m
102.728 243.982 l
101.090 248.061 l
105.379 247.465 l
102.728 243.982 l
S
newpath
188.451 335.220 m
170.516 324.107 l
173.035 328.795 l
175.764 324.231 l
170.516 324.107 l
S
newpath
191.180 374.886 m
167.787 361.390 l
171.195 367.289 l
174.509 361.335 l
167.787 361.390 l
S
newpath
152.217 377.664 m
131.163 358.612 l
133.382 365.416 l
138.061 360.058 l
131.163 358.612 l
S
newpath
149.488 337.999 m
133.893 321.328 l
135.222 326.922 l
139.316 322.953 l
133.893 321.328 l
S
newpath
63.3754 224.559 m
68.8339 203.920 l
65.1178 207.694 l
70.1863 209.083 l
68.8339 203.920 l
S
newpath
24.4126 227.338 m
32.2104 201.141 l
27.3055 205.821 l
33.7387 207.805 l
32.2104 201.141 l
S
newpath
27.1418 267.003 m
29.4812 238.425 l
25.4657 244.315 l
32.4837 244.910 l
29.4812 238.425 l
S
newpath
66.1046 264.225 m
66.1046 241.203 l
63.2779 246.188 l
68.9313 246.188 l
66.1046 241.203 l
S
newpath
74.2923 383.221 m
57.9170 353.055 l
57.7584 361.670 l
65.1663 357.502 l
57.9170 353.055 l
S
newpath
35.3295 386.000 m
21.2935 350.277 l
19.9461 359.797 l
28.7186 356.225 l
21.2935 350.277 l
S
newpath
32.6003 346.334 m
24.0227 312.993 l
21.7860 321.303 l
29.9737 319.120 l
24.0227 312.993 l
S
newpath
71.5631 343.556 m
60.6462 315.771 l
59.5982 323.176 l
66.4213 320.398 l
60.6462 315.771 l
S
newpath
29.8711 306.669 m
26.7519 275.709 l
23.6258 282.809 l
31.2287 282.015 l
26.7519 275.709 l
S
newpath
68.8339 303.890 m
63.3754 278.487 l
61.4381 284.682 l
67.6763 283.293 l
63.3754 278.487 l
S
newpath
113.255 380.443 m
94.5404 355.834 l
95.5706 363.543 l
101.614 358.780 l
94.5404 355.834 l
S
newpath
110.525 340.777 m
97.2696 318.550 l
97.4105 325.049 l
102.869 321.675 l
97.2696 318.550 l
S
newpath
107.796 301.112 m
99.9989 281.266 l
99.2503 286.555 l
104.124 284.570 l
99.9989 281.266 l
S
newpath
146.759 298.333 m
136.622 284.044 l
137.062 288.428 l
140.571 285.848 l
136.622 284.044 l
S
newpath
185.722 295.555 m
173.245 286.823 l
174.874 290.301 l
177.019 287.126 l
173.245 286.823 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
10.7665 195.002 m
385.994 195.002 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
286 240 13 37 rc
q
Q
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
28.3115 195.002 m
28.3115 200.202 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 211 18 32 rc
q
newpath
33.7343 228.500 m
12.2656 228.500 l
12.2656 226.890 l
33.7343 226.890 l
33.7343 228.500 l
h
f
Q
Q
q
newpath
39.0937 216.046 m
39.0937 232.843 l
39.0937 234.104 39.1484 234.908 39.2578 235.257  c
39.3671 235.606 39.5989 235.890 39.9531 236.109  c
40.3072 236.328 40.8750 236.437 41.6562 236.437  c
42.1250 236.437 l
42.1250 237.000 l
31.3125 237.000 l
31.3125 236.437 l
31.8593 236.437 l
32.7343 236.437 33.3593 236.335 33.7343 236.132  c
34.1093 235.929 34.3619 235.653 34.4921 235.304  c
34.6224 234.955 34.6875 234.135 34.6875 232.843  c
34.6875 222.203 l
34.6875 221.244 34.6432 220.648 34.5546 220.414  c
34.4661 220.179 34.2968 219.979 34.0468 219.812  c
33.7968 219.645 33.5104 219.562 33.1875 219.562  c
32.6770 219.562 32.0520 219.724 31.3125 220.046  c
31.0468 219.500 l
38.5937 216.046 l
39.0937 216.046 l
h
58.8593 226.734 m
58.8593 228.786 58.5729 230.697 58.0000 232.468  c
57.6562 233.562 57.1953 234.458 56.6171 235.156  c
56.0390 235.854 55.3802 236.406 54.6406 236.812  c
53.9010 237.218 53.0989 237.421 52.2343 237.421  c
51.2447 237.421 50.3515 237.169 49.5546 236.664  c
48.7578 236.158 48.0520 235.437 47.4375 234.500  c
46.9895 233.812 46.5989 232.901 46.2656 231.765  c
45.8385 230.224 45.6250 228.630 45.6250 226.984  c
45.6250 224.755 45.9375 222.703 46.5625 220.828  c
47.0729 219.286 47.8541 218.104 48.9062 217.281  c
49.9583 216.458 51.0677 216.046 52.2343 216.046  c
53.4218 216.046 54.5338 216.453 55.5703 217.265  c
56.6067 218.078 57.3645 219.171 57.8437 220.546  c
58.5208 222.432 58.8593 224.494 58.8593 226.734  c
h
54.2031 226.703 m
54.2031 223.109 54.1822 221.015 54.1406 220.421  c
54.0364 219.026 53.7968 218.078 53.4218 217.578  c
53.1614 217.255 52.7500 217.093 52.1875 217.093  c
51.7500 217.093 51.4062 217.213 51.1562 217.453  c
50.7812 217.807 50.5286 218.432 50.3984 219.328  c
50.2682 220.224 50.2031 223.338 50.2031 228.671  c
50.2031 231.578 50.3072 233.526 50.5156 234.515  c
50.6614 235.234 50.8750 235.713 51.1562 235.953  c
51.4375 236.192 51.8125 236.312 52.2812 236.312  c
52.7812 236.312 53.1614 236.151 53.4218 235.828  c
53.8385 235.265 54.0781 234.395 54.1406 233.218  c
54.2031 226.703 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
198.380 195.002 m
198.380 200.202 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
199.359 224.734 m
199.359 226.786 199.072 228.697 198.500 230.468  c
198.156 231.562 197.695 232.458 197.117 233.156  c
196.539 233.854 195.880 234.406 195.140 234.812  c
194.401 235.218 193.599 235.421 192.734 235.421  c
191.744 235.421 190.851 235.169 190.054 234.664  c
189.257 234.158 188.552 233.437 187.937 232.500  c
187.489 231.812 187.099 230.901 186.765 229.765  c
186.338 228.224 186.125 226.630 186.125 224.984  c
186.125 222.755 186.437 220.703 187.062 218.828  c
187.572 217.286 188.354 216.104 189.406 215.281  c
190.458 214.458 191.567 214.046 192.734 214.046  c
193.921 214.046 195.033 214.453 196.070 215.265  c
197.106 216.078 197.864 217.171 198.343 218.546  c
199.020 220.432 199.359 222.494 199.359 224.734  c
h
194.703 224.703 m
194.703 221.109 194.682 219.015 194.640 218.421  c
194.536 217.026 194.296 216.078 193.921 215.578  c
193.661 215.255 193.250 215.093 192.687 215.093  c
192.250 215.093 191.906 215.213 191.656 215.453  c
191.281 215.807 191.028 216.432 190.898 217.328  c
190.768 218.224 190.703 221.338 190.703 226.671  c
190.703 229.578 190.807 231.526 191.015 232.515  c
191.161 233.234 191.375 233.713 191.656 233.953  c
191.937 234.192 192.312 234.312 192.781 234.312  c
193.281 234.312 193.661 234.151 193.921 233.828  c
194.338 233.265 194.578 232.395 194.640 231.218  c
194.703 224.703 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
368.449 195.002 m
368.449 200.202 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
367.093 216.046 m
367.093 232.843 l
367.093 234.104 367.148 234.908 367.257 235.257  c
367.367 235.606 367.599 235.890 367.953 236.109  c
368.307 236.328 368.875 236.437 369.656 236.437  c
370.125 236.437 l
370.125 237.000 l
359.312 237.000 l
359.312 236.437 l
359.859 236.437 l
360.734 236.437 361.359 236.335 361.734 236.132  c
362.109 235.929 362.362 235.653 362.492 235.304  c
362.622 234.955 362.687 234.135 362.687 232.843  c
362.687 222.203 l
362.687 221.244 362.643 220.648 362.554 220.414  c
362.466 220.179 362.296 219.979 362.046 219.812  c
361.796 219.645 361.510 219.562 361.187 219.562  c
360.677 219.562 360.052 219.724 359.312 220.046  c
359.046 219.500 l
366.593 216.046 l
367.093 216.046 l
h
386.859 226.734 m
386.859 228.786 386.572 230.697 386.000 232.468  c
385.656 233.562 385.195 234.458 384.617 235.156  c
384.039 235.854 383.380 236.406 382.640 236.812  c
381.901 237.218 381.099 237.421 380.234 237.421  c
379.244 237.421 378.351 237.169 377.554 236.664  c
376.757 236.158 376.052 235.437 375.437 234.500  c
374.989 233.812 374.599 232.901 374.265 231.765  c
373.838 230.224 373.625 228.630 373.625 226.984  c
373.625 224.755 373.937 222.703 374.562 220.828  c
375.072 219.286 375.854 218.104 376.906 217.281  c
377.958 216.458 379.067 216.046 380.234 216.046  c
381.421 216.046 382.533 216.453 383.570 217.265  c
384.606 218.078 385.364 219.171 385.843 220.546  c
386.520 222.432 386.859 224.494 386.859 226.734  c
h
382.203 226.703 m
382.203 223.109 382.182 221.015 382.140 220.421  c
382.036 219.026 381.796 218.078 381.421 217.578  c
381.161 217.255 380.750 217.093 380.187 217.093  c
379.750 217.093 379.406 217.213 379.156 217.453  c
378.781 217.807 378.528 218.432 378.398 219.328  c
378.268 220.224 378.203 223.338 378.203 228.671  c
378.203 231.578 378.307 233.526 378.515 234.515  c
378.661 235.234 378.875 235.713 379.156 235.953  c
379.437 236.192 379.812 236.312 380.281 236.312  c
380.781 236.312 381.161 236.151 381.421 235.828  c
381.838 235.265 382.078 234.395 382.140 233.218  c
382.203 226.703 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
198.380 386.000 m
198.380 4.00518 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
116 81 13 37 rc
q
Q
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
198.380 368.138 m
193.180 368.138 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
139 359 18 32 rc
q
newpath
166.734 376.500 m
145.265 376.500 l
145.265 374.890 l
166.734 374.890 l
166.734 376.500 l
h
f
Q
Q
q
newpath
172.093 364.046 m
172.093 380.843 l
172.093 382.104 172.148 382.908 172.257 383.257  c
172.367 383.606 172.599 383.890 172.953 384.109  c
173.307 384.328 173.875 384.437 174.656 384.437  c
175.125 384.437 l
175.125 385.000 l
164.312 385.000 l
164.312 384.437 l
164.859 384.437 l
165.734 384.437 166.359 384.335 166.734 384.132  c
167.109 383.929 167.362 383.653 167.492 383.304  c
167.622 382.955 167.687 382.135 167.687 380.843  c
167.687 370.203 l
167.687 369.244 167.643 368.648 167.554 368.414  c
167.466 368.179 167.296 367.979 167.046 367.812  c
166.796 367.645 166.510 367.562 166.187 367.562  c
165.677 367.562 165.052 367.724 164.312 368.046  c
164.046 367.500 l
171.593 364.046 l
172.093 364.046 l
h
191.859 374.734 m
191.859 376.786 191.572 378.697 191.000 380.468  c
190.656 381.562 190.195 382.458 189.617 383.156  c
189.039 383.854 188.380 384.406 187.640 384.812  c
186.901 385.218 186.099 385.421 185.234 385.421  c
184.244 385.421 183.351 385.169 182.554 384.664  c
181.757 384.158 181.052 383.437 180.437 382.500  c
179.989 381.812 179.599 380.901 179.265 379.765  c
178.838 378.224 178.625 376.630 178.625 374.984  c
178.625 372.755 178.937 370.703 179.562 368.828  c
180.072 367.286 180.854 366.104 181.906 365.281  c
182.958 364.458 184.067 364.046 185.234 364.046  c
186.421 364.046 187.533 364.453 188.570 365.265  c
189.606 366.078 190.364 367.171 190.843 368.546  c
191.520 370.432 191.859 372.494 191.859 374.734  c
h
187.203 374.703 m
187.203 371.109 187.182 369.015 187.140 368.421  c
187.036 367.026 186.796 366.078 186.421 365.578  c
186.161 365.255 185.750 365.093 185.187 365.093  c
184.750 365.093 184.406 365.213 184.156 365.453  c
183.781 365.807 183.528 366.432 183.398 367.328  c
183.268 368.224 183.203 371.338 183.203 376.671  c
183.203 379.578 183.307 381.526 183.515 382.515  c
183.661 383.234 183.875 383.713 184.156 383.953  c
184.437 384.192 184.812 384.312 185.281 384.312  c
185.781 384.312 186.161 384.151 186.421 383.828  c
186.838 383.265 187.078 382.395 187.140 381.218  c
187.203 374.703 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
198.380 195.002 m
193.180 195.002 l
S
Q
q
newpath
198.380 21.8666 m
193.180 21.8666 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
172.093 17.0468 m
172.093 33.8437 l
172.093 35.1041 172.148 35.9088 172.257 36.2578  c
172.367 36.6067 172.599 36.8906 172.953 37.1093  c
173.307 37.3281 173.875 37.4375 174.656 37.4375  c
175.125 37.4375 l
175.125 38.0000 l
164.312 38.0000 l
164.312 37.4375 l
164.859 37.4375 l
165.734 37.4375 166.359 37.3359 166.734 37.1328  c
167.109 36.9296 167.362 36.6536 167.492 36.3046  c
167.622 35.9557 167.687 35.1354 167.687 33.8437  c
167.687 23.2031 l
167.687 22.2447 167.643 21.6484 167.554 21.4140  c
167.466 21.1796 167.296 20.9791 167.046 20.8125  c
166.796 20.6458 166.510 20.5625 166.187 20.5625  c
165.677 20.5625 165.052 20.7239 164.312 21.0468  c
164.046 20.5000 l
171.593 17.0468 l
172.093 17.0468 l
h
191.859 27.7343 m
191.859 29.7864 191.572 31.6979 191.000 33.4687  c
190.656 34.5625 190.195 35.4583 189.617 36.1562  c
189.039 36.8541 188.380 37.4062 187.640 37.8125  c
186.901 38.2187 186.099 38.4218 185.234 38.4218  c
184.244 38.4218 183.351 38.1692 182.554 37.6640  c
181.757 37.1588 181.052 36.4375 180.437 35.5000  c
179.989 34.8125 179.599 33.9010 179.265 32.7656  c
178.838 31.2239 178.625 29.6302 178.625 27.9843  c
178.625 25.7552 178.937 23.7031 179.562 21.8281  c
180.072 20.2864 180.854 19.1041 181.906 18.2812  c
182.958 17.4583 184.067 17.0468 185.234 17.0468  c
186.421 17.0468 187.533 17.4531 188.570 18.2656  c
189.606 19.0781 190.364 20.1718 190.843 21.5468  c
191.520 23.4322 191.859 25.4947 191.859 27.7343  c
h
187.203 27.7031 m
187.203 24.1093 187.182 22.0156 187.140 21.4218  c
187.036 20.0260 186.796 19.0781 186.421 18.5781  c
186.161 18.2552 185.750 18.0937 185.187 18.0937  c
184.750 18.0937 184.406 18.2135 184.156 18.4531  c
183.781 18.8072 183.528 19.4322 183.398 20.3281  c
183.268 21.2239 183.203 24.3385 183.203 29.6718  c
183.203 32.5781 183.307 34.5260 183.515 35.5156  c
183.661 36.2343 183.875 36.7135 184.156 36.9531  c
184.437 37.1927 184.812 37.3125 185.281 37.3125  c
185.781 37.3125 186.161 37.1510 186.421 36.8281  c
186.838 36.2656 187.078 35.3958 187.140 34.2187  c
187.203 27.7031 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
