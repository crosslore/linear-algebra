%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Saturday, November 24, 2012 2:57:17 PM MST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
2 J
0 j
[ 1.00000 0 0 1.00000 76.0000 305.000 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
f
[ 1.00000 0 0 1.00000 -76.0000 -305.000 ] concat
[ 1.00000 0 0 1.00000 223.000 161.000 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
f
[ 1.00000 0 0 1.00000 -223.000 -161.000 ] concat
[ 1.00000 0 0 1.00000 296.000 88.0000 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
f
[ 1.00000 0 0 1.00000 -296.000 -88.0000 ] concat
[ 1.00000 0 0 1.00000 333.000 52.0000 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
f
[ 1.00000 0 0 1.00000 -333.000 -52.0000 ] concat
[ 1.00000 0 0 1.00000 351.000 34.0000 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
f
[ 1.00000 0 0 1.00000 -351.000 -34.0000 ] concat
Q
Q
q
2 J
0 j
q
newpath
76.0000 311.000 m
372.967 311.000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
221 353 8 37 rc
q
Q
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
79.0000 311.000 m
79.0000 316.200 l
S
Q
q
newpath
137.793 311.000 m
137.793 316.200 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
138.843 353.000 m
126.750 353.000 l
126.750 352.671 l
130.458 348.255 132.708 345.286 133.500 343.765  c
134.291 342.244 134.687 340.755 134.687 339.296  c
134.687 338.244 134.359 337.367 133.703 336.664  c
133.046 335.960 132.244 335.609 131.296 335.609  c
129.744 335.609 128.541 336.385 127.687 337.937  c
127.125 337.734 l
127.666 335.796 128.492 334.364 129.601 333.437  c
130.710 332.510 131.994 332.046 133.453 332.046  c
134.484 332.046 135.429 332.289 136.289 332.773  c
137.148 333.257 137.820 333.921 138.304 334.765  c
138.789 335.609 139.031 336.401 139.031 337.140  c
139.031 338.484 138.656 339.843 137.906 341.218  c
136.895 343.093 134.671 345.697 131.234 349.031  c
135.671 349.031 l
136.765 349.031 137.476 348.987 137.804 348.898  c
138.132 348.809 138.401 348.656 138.609 348.437  c
138.817 348.218 139.093 347.760 139.437 347.062  c
139.984 347.062 l
138.843 353.000 l
h
156.062 332.046 m
156.062 332.468 l
154.239 332.937 152.773 333.536 151.664 334.265  c
150.554 334.994 149.679 335.882 149.039 336.929  c
148.398 337.976 147.906 339.270 147.562 340.812  c
148.000 340.510 148.364 340.312 148.656 340.218  c
149.312 340.020 149.974 339.921 150.640 339.921  c
152.171 339.921 153.450 340.479 154.476 341.593  c
155.502 342.708 156.015 344.229 156.015 346.156  c
156.015 347.510 155.737 348.752 155.179 349.882  c
154.622 351.013 153.835 351.885 152.820 352.500  c
151.804 353.114 150.713 353.421 149.546 353.421  c
148.286 353.421 147.122 353.075 146.054 352.382  c
144.987 351.690 144.153 350.679 143.554 349.351  c
142.955 348.023 142.656 346.572 142.656 345.000  c
142.656 342.708 143.208 340.570 144.312 338.585  c
145.416 336.601 146.984 335.020 149.015 333.843  c
151.046 332.666 153.395 332.067 156.062 332.046  c
h
147.359 342.046 m
147.276 343.432 147.234 344.447 147.234 345.093  c
147.234 346.489 147.369 347.838 147.640 349.140  c
147.911 350.442 148.276 351.354 148.734 351.875  c
149.067 352.250 149.463 352.437 149.921 352.437  c
150.380 352.437 150.791 352.166 151.156 351.625  c
151.520 351.083 151.703 349.989 151.703 348.343  c
151.703 345.552 151.364 343.630 150.687 342.578  c
150.250 341.890 149.666 341.546 148.937 341.546  c
148.531 341.546 148.005 341.713 147.359 342.046  c
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
196.587 311.000 m
196.587 316.200 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
197.843 353.000 m
185.750 353.000 l
185.750 352.671 l
189.458 348.255 191.708 345.286 192.500 343.765  c
193.291 342.244 193.687 340.755 193.687 339.296  c
193.687 338.244 193.359 337.367 192.703 336.664  c
192.046 335.960 191.244 335.609 190.296 335.609  c
188.744 335.609 187.541 336.385 186.687 337.937  c
186.125 337.734 l
186.666 335.796 187.492 334.364 188.601 333.437  c
189.710 332.510 190.994 332.046 192.453 332.046  c
193.484 332.046 194.429 332.289 195.289 332.773  c
196.148 333.257 196.820 333.921 197.304 334.765  c
197.789 335.609 198.031 336.401 198.031 337.140  c
198.031 338.484 197.656 339.843 196.906 341.218  c
195.895 343.093 193.671 345.697 190.234 349.031  c
194.671 349.031 l
195.765 349.031 196.476 348.987 196.804 348.898  c
197.132 348.809 197.401 348.656 197.609 348.437  c
197.817 348.218 198.093 347.760 198.437 347.062  c
198.984 347.062 l
197.843 353.000 l
h
206.000 353.421 m
211.578 336.484 l
207.328 336.484 l
205.661 336.484 204.411 336.703 203.578 337.140  c
202.984 337.442 202.500 338.010 202.125 338.843  c
201.546 338.843 l
203.031 332.468 l
215.265 332.468 l
208.375 353.421 l
206.000 353.421 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
255.380 311.000 m
255.380 316.200 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
256.843 353.000 m
244.750 353.000 l
244.750 352.671 l
248.458 348.255 250.708 345.286 251.500 343.765  c
252.291 342.244 252.687 340.755 252.687 339.296  c
252.687 338.244 252.359 337.367 251.703 336.664  c
251.046 335.960 250.244 335.609 249.296 335.609  c
247.744 335.609 246.541 336.385 245.687 337.937  c
245.125 337.734 l
245.666 335.796 246.492 334.364 247.601 333.437  c
248.710 332.510 249.994 332.046 251.453 332.046  c
252.484 332.046 253.429 332.289 254.289 332.773  c
255.148 333.257 255.820 333.921 256.304 334.765  c
256.789 335.609 257.031 336.401 257.031 337.140  c
257.031 338.484 256.656 339.843 255.906 341.218  c
254.895 343.093 252.671 345.697 249.234 349.031  c
253.671 349.031 l
254.765 349.031 255.476 348.987 255.804 348.898  c
256.132 348.809 256.401 348.656 256.609 348.437  c
256.817 348.218 257.093 347.760 257.437 347.062  c
257.984 347.062 l
256.843 353.000 l
h
270.062 341.406 m
271.510 342.468 272.513 343.455 273.070 344.367  c
273.627 345.278 273.906 346.322 273.906 347.500  c
273.906 349.156 273.283 350.557 272.039 351.703  c
270.794 352.849 269.104 353.421 266.968 353.421  c
264.937 353.421 263.367 352.921 262.257 351.921  c
261.148 350.921 260.593 349.703 260.593 348.265  c
260.593 347.161 260.914 346.195 261.554 345.367  c
262.195 344.539 263.260 343.781 264.750 343.093  c
263.125 341.854 262.083 340.841 261.625 340.054  c
261.166 339.268 260.937 338.354 260.937 337.312  c
260.937 335.947 261.520 334.742 262.687 333.695  c
263.854 332.648 265.453 332.125 267.484 332.125  c
269.432 332.125 270.934 332.585 271.992 333.507  c
273.049 334.429 273.578 335.536 273.578 336.828  c
273.578 337.796 273.291 338.653 272.718 339.398  c
272.145 340.143 271.260 340.812 270.062 341.406  c
h
268.921 340.640 m
269.286 340.130 269.559 339.562 269.742 338.937  c
269.924 338.312 270.015 337.625 270.015 336.875  c
270.015 335.562 269.734 334.557 269.171 333.859  c
268.744 333.328 268.161 333.062 267.421 333.062  c
266.744 333.062 266.169 333.307 265.695 333.796  c
265.221 334.286 264.984 334.895 264.984 335.625  c
264.984 336.364 265.247 337.130 265.773 337.921  c
266.299 338.713 267.349 339.619 268.921 340.640  c
h
265.890 343.828 m
265.578 344.109 265.354 344.364 265.218 344.593  c
265.020 344.947 264.841 345.463 264.679 346.140  c
264.518 346.817 264.437 347.526 264.437 348.265  c
264.437 349.213 264.557 350.007 264.796 350.648  c
265.036 351.289 265.382 351.750 265.835 352.031  c
266.289 352.312 266.750 352.453 267.218 352.453  c
267.958 352.453 268.580 352.182 269.085 351.640  c
269.591 351.099 269.843 350.359 269.843 349.421  c
269.843 347.463 268.526 345.599 265.890 343.828  c
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
314.174 311.000 m
314.174 316.200 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
315.843 353.000 m
303.750 353.000 l
303.750 352.671 l
307.458 348.255 309.708 345.286 310.500 343.765  c
311.291 342.244 311.687 340.755 311.687 339.296  c
311.687 338.244 311.359 337.367 310.703 336.664  c
310.046 335.960 309.244 335.609 308.296 335.609  c
306.744 335.609 305.541 336.385 304.687 337.937  c
304.125 337.734 l
304.666 335.796 305.492 334.364 306.601 333.437  c
307.710 332.510 308.994 332.046 310.453 332.046  c
311.484 332.046 312.429 332.289 313.289 332.773  c
314.148 333.257 314.820 333.921 315.304 334.765  c
315.789 335.609 316.031 336.401 316.031 337.140  c
316.031 338.484 315.656 339.843 314.906 341.218  c
313.895 343.093 311.671 345.697 308.234 349.031  c
312.671 349.031 l
313.765 349.031 314.476 348.987 314.804 348.898  c
315.132 348.809 315.401 348.656 315.609 348.437  c
315.817 348.218 316.093 347.760 316.437 347.062  c
316.984 347.062 l
315.843 353.000 l
h
319.453 353.421 m
319.453 353.000 l
321.130 352.614 322.552 352.049 323.718 351.304  c
324.885 350.559 325.807 349.638 326.484 348.539  c
327.161 347.440 327.640 346.171 327.921 344.734  c
327.296 345.057 326.763 345.281 326.320 345.406  c
325.877 345.531 325.416 345.593 324.937 345.593  c
323.385 345.593 322.091 345.033 321.054 343.914  c
320.018 342.794 319.500 341.260 319.500 339.312  c
319.500 337.958 319.778 336.718 320.335 335.593  c
320.893 334.468 321.692 333.596 322.734 332.976  c
323.776 332.356 324.859 332.046 325.984 332.046  c
327.182 332.046 328.315 332.390 329.382 333.078  c
330.450 333.765 331.302 334.760 331.937 336.062  c
332.572 337.364 332.890 338.849 332.890 340.515  c
332.890 342.671 332.375 344.739 331.343 346.718  c
330.312 348.697 328.770 350.283 326.718 351.476  c
324.666 352.669 322.244 353.317 319.453 353.421  c
h
328.140 343.468 m
328.244 342.333 328.296 341.338 328.296 340.484  c
328.296 338.651 328.083 336.937 327.656 335.343  c
327.416 334.468 327.057 333.822 326.578 333.406  c
326.328 333.187 326.000 333.078 325.593 333.078  c
325.093 333.078 324.703 333.296 324.421 333.734  c
324.026 334.328 323.828 335.463 323.828 337.140  c
323.828 339.932 324.161 341.859 324.828 342.921  c
325.265 343.609 325.849 343.953 326.578 343.953  c
326.974 343.953 327.494 343.791 328.140 343.468  c
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
372.967 311.000 m
372.967 316.200 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
365.593 342.703 m
365.593 342.171 l
366.739 341.838 367.533 341.528 367.976 341.242  c
368.419 340.955 368.802 340.518 369.125 339.929  c
369.447 339.341 369.609 338.744 369.609 338.140  c
369.609 337.296 369.304 336.575 368.695 335.976  c
368.085 335.377 367.328 335.078 366.421 335.078  c
365.005 335.078 363.802 335.822 362.812 337.312  c
362.250 337.125 l
362.979 335.437 363.911 334.169 365.046 333.320  c
366.182 332.471 367.447 332.046 368.843 332.046  c
370.260 332.046 371.432 332.481 372.359 333.351  c
373.286 334.221 373.750 335.234 373.750 336.390  c
373.750 337.151 373.533 337.882 373.101 338.585  c
372.669 339.289 371.994 339.906 371.078 340.437  c
372.265 341.010 373.169 341.718 373.789 342.562  c
374.408 343.406 374.718 344.463 374.718 345.734  c
374.718 347.869 373.942 349.687 372.390 351.187  c
370.838 352.687 368.760 353.437 366.156 353.437  c
364.427 353.437 363.161 353.151 362.359 352.578  c
361.786 352.171 361.500 351.651 361.500 351.015  c
361.500 350.557 361.666 350.164 362.000 349.835  c
362.333 349.507 362.718 349.343 363.156 349.343  c
363.489 349.343 363.802 349.411 364.093 349.546  c
364.250 349.630 364.820 350.072 365.804 350.875  c
366.789 351.677 367.708 352.078 368.562 352.078  c
369.312 352.078 369.955 351.783 370.492 351.195  c
371.028 350.606 371.296 349.854 371.296 348.937  c
371.296 347.562 370.812 346.291 369.843 345.125  c
368.875 343.958 367.458 343.151 365.593 342.703  c
h
390.859 342.734 m
390.859 344.786 390.572 346.697 390.000 348.468  c
389.656 349.562 389.195 350.458 388.617 351.156  c
388.039 351.854 387.380 352.406 386.640 352.812  c
385.901 353.218 385.099 353.421 384.234 353.421  c
383.244 353.421 382.351 353.169 381.554 352.664  c
380.757 352.158 380.052 351.437 379.437 350.500  c
378.989 349.812 378.599 348.901 378.265 347.765  c
377.838 346.224 377.625 344.630 377.625 342.984  c
377.625 340.755 377.937 338.703 378.562 336.828  c
379.072 335.286 379.854 334.104 380.906 333.281  c
381.958 332.458 383.067 332.046 384.234 332.046  c
385.421 332.046 386.533 332.453 387.570 333.265  c
388.606 334.078 389.364 335.171 389.843 336.546  c
390.520 338.432 390.859 340.494 390.859 342.734  c
h
386.203 342.703 m
386.203 339.109 386.182 337.015 386.140 336.421  c
386.036 335.026 385.796 334.078 385.421 333.578  c
385.161 333.255 384.750 333.093 384.187 333.093  c
383.750 333.093 383.406 333.213 383.156 333.453  c
382.781 333.807 382.528 334.432 382.398 335.328  c
382.268 336.224 382.203 339.338 382.203 344.671  c
382.203 347.578 382.307 349.526 382.515 350.515  c
382.661 351.234 382.875 351.713 383.156 351.953  c
383.437 352.192 383.812 352.312 384.281 352.312  c
384.781 352.312 385.161 352.151 385.421 351.828  c
385.838 351.265 386.078 350.395 386.140 349.218  c
386.203 342.703 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
76.0000 311.000 m
76.0000 19.0460 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 145 8 37 rc
q
Q
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
76.0000 308.000 m
70.8000 308.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
52.8437 325.000 m
40.7500 325.000 l
40.7500 324.671 l
44.4583 320.255 46.7083 317.286 47.5000 315.765  c
48.2916 314.244 48.6875 312.755 48.6875 311.296  c
48.6875 310.244 48.3593 309.367 47.7031 308.664  c
47.0468 307.960 46.2447 307.609 45.2968 307.609  c
43.7447 307.609 42.5416 308.385 41.6875 309.937  c
41.1250 309.734 l
41.6666 307.796 42.4921 306.364 43.6015 305.437  c
44.7109 304.510 45.9947 304.046 47.4531 304.046  c
48.4843 304.046 49.4296 304.289 50.2890 304.773  c
51.1484 305.257 51.8203 305.921 52.3046 306.765  c
52.7890 307.609 53.0312 308.401 53.0312 309.140  c
53.0312 310.484 52.6562 311.843 51.9062 313.218  c
50.8958 315.093 48.6718 317.697 45.2343 321.031  c
49.6718 321.031 l
50.7656 321.031 51.4765 320.987 51.8046 320.898  c
52.1328 320.809 52.4010 320.656 52.6093 320.437  c
52.8177 320.218 53.0937 319.760 53.4375 319.062  c
53.9843 319.062 l
52.8437 325.000 l
h
69.8593 314.734 m
69.8593 316.786 69.5729 318.697 69.0000 320.468  c
68.6562 321.562 68.1953 322.458 67.6171 323.156  c
67.0390 323.854 66.3802 324.406 65.6406 324.812  c
64.9010 325.218 64.0989 325.421 63.2343 325.421  c
62.2447 325.421 61.3515 325.169 60.5546 324.664  c
59.7578 324.158 59.0520 323.437 58.4375 322.500  c
57.9895 321.812 57.5989 320.901 57.2656 319.765  c
56.8385 318.224 56.6250 316.630 56.6250 314.984  c
56.6250 312.755 56.9375 310.703 57.5625 308.828  c
58.0729 307.286 58.8541 306.104 59.9062 305.281  c
60.9583 304.458 62.0677 304.046 63.2343 304.046  c
64.4218 304.046 65.5338 304.453 66.5703 305.265  c
67.6067 306.078 68.3645 307.171 68.8437 308.546  c
69.5208 310.432 69.8593 312.494 69.8593 314.734  c
h
65.2031 314.703 m
65.2031 311.109 65.1822 309.015 65.1406 308.421  c
65.0364 307.026 64.7968 306.078 64.4218 305.578  c
64.1614 305.255 63.7500 305.093 63.1875 305.093  c
62.7500 305.093 62.4062 305.213 62.1562 305.453  c
61.7812 305.807 61.5286 306.432 61.3984 307.328  c
61.2682 308.224 61.2031 311.338 61.2031 316.671  c
61.2031 319.578 61.3072 321.526 61.5156 322.515  c
61.6614 323.234 61.8750 323.713 62.1562 323.953  c
62.4375 324.192 62.8125 324.312 63.2812 324.312  c
63.7812 324.312 64.1614 324.151 64.4218 323.828  c
64.8385 323.265 65.0781 322.395 65.1406 321.218  c
65.2031 314.703 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
76.0000 235.761 m
70.8000 235.761 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
28.8437 252.000 m
16.7500 252.000 l
16.7500 251.671 l
20.4583 247.255 22.7083 244.286 23.5000 242.765  c
24.2916 241.244 24.6875 239.755 24.6875 238.296  c
24.6875 237.244 24.3593 236.367 23.7031 235.664  c
23.0468 234.960 22.2447 234.609 21.2968 234.609  c
19.7447 234.609 18.5416 235.385 17.6875 236.937  c
17.1250 236.734 l
17.6666 234.796 18.4921 233.364 19.6015 232.437  c
20.7109 231.510 21.9947 231.046 23.4531 231.046  c
24.4843 231.046 25.4296 231.289 26.2890 231.773  c
27.1484 232.257 27.8203 232.921 28.3046 233.765  c
28.7890 234.609 29.0312 235.401 29.0312 236.140  c
29.0312 237.484 28.6562 238.843 27.9062 240.218  c
26.8958 242.093 24.6718 244.697 21.2343 248.031  c
25.6718 248.031 l
26.7656 248.031 27.4765 247.987 27.8046 247.898  c
28.1328 247.809 28.4010 247.656 28.6093 247.437  c
28.8177 247.218 29.0937 246.760 29.4375 246.062  c
29.9843 246.062 l
28.8437 252.000 l
h
44.3437 252.000 m
32.2500 252.000 l
32.2500 251.671 l
35.9583 247.255 38.2083 244.286 39.0000 242.765  c
39.7916 241.244 40.1875 239.755 40.1875 238.296  c
40.1875 237.244 39.8593 236.367 39.2031 235.664  c
38.5468 234.960 37.7447 234.609 36.7968 234.609  c
35.2447 234.609 34.0416 235.385 33.1875 236.937  c
32.6250 236.734 l
33.1666 234.796 33.9921 233.364 35.1015 232.437  c
36.2109 231.510 37.4947 231.046 38.9531 231.046  c
39.9843 231.046 40.9296 231.289 41.7890 231.773  c
42.6484 232.257 43.3203 232.921 43.8046 233.765  c
44.2890 234.609 44.5312 235.401 44.5312 236.140  c
44.5312 237.484 44.1562 238.843 43.4062 240.218  c
42.3958 242.093 40.1718 244.697 36.7343 248.031  c
41.1718 248.031 l
42.2656 248.031 42.9765 247.987 43.3046 247.898  c
43.6328 247.809 43.9010 247.656 44.1093 247.437  c
44.3177 247.218 44.5937 246.760 44.9375 246.062  c
45.4843 246.062 l
44.3437 252.000 l
h
50.8750 247.343 m
51.5833 247.343 52.1822 247.591 52.6718 248.085  c
53.1614 248.580 53.4062 249.171 53.4062 249.859  c
53.4062 250.557 53.1588 251.151 52.6640 251.640  c
52.1692 252.130 51.5729 252.375 50.8750 252.375  c
50.1770 252.375 49.5833 252.130 49.0937 251.640  c
48.6041 251.151 48.3593 250.557 48.3593 249.859  c
48.3593 249.171 48.6041 248.580 49.0937 248.085  c
49.5833 247.591 50.1770 247.343 50.8750 247.343  c
h
59.4687 231.468 m
69.0781 231.468 l
67.5625 235.375 l
59.4687 235.375 l
58.7031 237.421 l
62.1822 237.557 64.8593 238.427 66.7343 240.031  c
68.2760 241.354 69.0468 243.000 69.0468 244.968  c
69.0468 246.229 68.6901 247.460 67.9765 248.664  c
67.2630 249.867 66.2552 250.794 64.9531 251.445  c
63.6510 252.096 62.2239 252.421 60.6718 252.421  c
58.9947 252.421 57.7083 252.109 56.8125 251.484  c
56.1875 251.036 55.8750 250.531 55.8750 249.968  c
55.8750 249.541 56.0390 249.161 56.3671 248.828  c
56.6953 248.494 57.0729 248.328 57.5000 248.328  c
57.8958 248.328 58.2968 248.408 58.7031 248.570  c
59.1093 248.731 59.8020 249.151 60.7812 249.828  c
61.3958 250.255 61.9218 250.552 62.3593 250.718  c
62.6718 250.833 63.0260 250.890 63.4218 250.890  c
64.2552 250.890 64.9609 250.588 65.5390 249.984  c
66.1171 249.380 66.4062 248.656 66.4062 247.812  c
66.4062 246.031 65.5182 244.585 63.7421 243.476  c
61.9661 242.367 59.7239 241.812 57.0156 241.812  c
56.7447 241.812 56.3385 241.817 55.7968 241.828  c
59.4687 231.468 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
76.0000 163.523 m
70.8000 163.523 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
52.8437 180.000 m
40.7500 180.000 l
40.7500 179.671 l
44.4583 175.255 46.7083 172.286 47.5000 170.765  c
48.2916 169.244 48.6875 167.755 48.6875 166.296  c
48.6875 165.244 48.3593 164.367 47.7031 163.664  c
47.0468 162.960 46.2447 162.609 45.2968 162.609  c
43.7447 162.609 42.5416 163.385 41.6875 164.937  c
41.1250 164.734 l
41.6666 162.796 42.4921 161.364 43.6015 160.437  c
44.7109 159.510 45.9947 159.046 47.4531 159.046  c
48.4843 159.046 49.4296 159.289 50.2890 159.773  c
51.1484 160.257 51.8203 160.921 52.3046 161.765  c
52.7890 162.609 53.0312 163.401 53.0312 164.140  c
53.0312 165.484 52.6562 166.843 51.9062 168.218  c
50.8958 170.093 48.6718 172.697 45.2343 176.031  c
49.6718 176.031 l
50.7656 176.031 51.4765 175.987 51.8046 175.898  c
52.1328 175.809 52.4010 175.656 52.6093 175.437  c
52.8177 175.218 53.0937 174.760 53.4375 174.062  c
53.9843 174.062 l
52.8437 180.000 l
h
60.2187 159.468 m
69.8281 159.468 l
68.3125 163.375 l
60.2187 163.375 l
59.4531 165.421 l
62.9322 165.557 65.6093 166.427 67.4843 168.031  c
69.0260 169.354 69.7968 171.000 69.7968 172.968  c
69.7968 174.229 69.4401 175.460 68.7265 176.664  c
68.0130 177.867 67.0052 178.794 65.7031 179.445  c
64.4010 180.096 62.9739 180.421 61.4218 180.421  c
59.7447 180.421 58.4583 180.109 57.5625 179.484  c
56.9375 179.036 56.6250 178.531 56.6250 177.968  c
56.6250 177.541 56.7890 177.161 57.1171 176.828  c
57.4453 176.494 57.8229 176.328 58.2500 176.328  c
58.6458 176.328 59.0468 176.408 59.4531 176.570  c
59.8593 176.731 60.5520 177.151 61.5312 177.828  c
62.1458 178.255 62.6718 178.552 63.1093 178.718  c
63.4218 178.833 63.7760 178.890 64.1718 178.890  c
65.0052 178.890 65.7109 178.588 66.2890 177.984  c
66.8671 177.380 67.1562 176.656 67.1562 175.812  c
67.1562 174.031 66.2682 172.585 64.4921 171.476  c
62.7161 170.367 60.4739 169.812 57.7656 169.812  c
57.4947 169.812 57.0885 169.817 56.5468 169.828  c
60.2187 159.468 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
76.0000 91.2845 m
70.8000 91.2845 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
28.8437 108.000 m
16.7500 108.000 l
16.7500 107.671 l
20.4583 103.255 22.7083 100.286 23.5000 98.7656  c
24.2916 97.2447 24.6875 95.7552 24.6875 94.2968  c
24.6875 93.2447 24.3593 92.3671 23.7031 91.6640  c
23.0468 90.9609 22.2447 90.6093 21.2968 90.6093  c
19.7447 90.6093 18.5416 91.3854 17.6875 92.9375  c
17.1250 92.7343 l
17.6666 90.7968 18.4921 89.3645 19.6015 88.4375  c
20.7109 87.5104 21.9947 87.0468 23.4531 87.0468  c
24.4843 87.0468 25.4296 87.2890 26.2890 87.7734  c
27.1484 88.2578 27.8203 88.9218 28.3046 89.7656  c
28.7890 90.6093 29.0312 91.4010 29.0312 92.1406  c
29.0312 93.4843 28.6562 94.8437 27.9062 96.2187  c
26.8958 98.0937 24.6718 100.697 21.2343 104.031  c
25.6718 104.031 l
26.7656 104.031 27.4765 103.987 27.8046 103.898  c
28.1328 103.809 28.4010 103.656 28.6093 103.437  c
28.8177 103.218 29.0937 102.760 29.4375 102.062  c
29.9843 102.062 l
28.8437 108.000 l
h
37.0000 108.421 m
42.5781 91.4843 l
38.3281 91.4843 l
36.6614 91.4843 35.4114 91.7031 34.5781 92.1406  c
33.9843 92.4427 33.5000 93.0104 33.1250 93.8437  c
32.5468 93.8437 l
34.0312 87.4687 l
46.2656 87.4687 l
39.3750 108.421 l
37.0000 108.421 l
h
50.8750 103.343 m
51.5833 103.343 52.1822 103.591 52.6718 104.085  c
53.1614 104.580 53.4062 105.171 53.4062 105.859  c
53.4062 106.557 53.1588 107.151 52.6640 107.640  c
52.1692 108.130 51.5729 108.375 50.8750 108.375  c
50.1770 108.375 49.5833 108.130 49.0937 107.640  c
48.6041 107.151 48.3593 106.557 48.3593 105.859  c
48.3593 105.171 48.6041 104.580 49.0937 104.085  c
49.5833 103.591 50.1770 103.343 50.8750 103.343  c
h
59.4687 87.4687 m
69.0781 87.4687 l
67.5625 91.3750 l
59.4687 91.3750 l
58.7031 93.4218 l
62.1822 93.5572 64.8593 94.4270 66.7343 96.0312  c
68.2760 97.3541 69.0468 99.0000 69.0468 100.968  c
69.0468 102.229 68.6901 103.460 67.9765 104.664  c
67.2630 105.867 66.2552 106.794 64.9531 107.445  c
63.6510 108.096 62.2239 108.421 60.6718 108.421  c
58.9947 108.421 57.7083 108.109 56.8125 107.484  c
56.1875 107.036 55.8750 106.531 55.8750 105.968  c
55.8750 105.541 56.0390 105.161 56.3671 104.828  c
56.6953 104.494 57.0729 104.328 57.5000 104.328  c
57.8958 104.328 58.2968 104.408 58.7031 104.570  c
59.1093 104.731 59.8020 105.151 60.7812 105.828  c
61.3958 106.255 61.9218 106.552 62.3593 106.718  c
62.6718 106.833 63.0260 106.890 63.4218 106.890  c
64.2552 106.890 64.9609 106.588 65.5390 105.984  c
66.1171 105.380 66.4062 104.656 66.4062 103.812  c
66.4062 102.031 65.5182 100.585 63.7421 99.4765  c
61.9661 98.3671 59.7239 97.8125 57.0156 97.8125  c
56.7447 97.8125 56.3385 97.8177 55.7968 97.8281  c
59.4687 87.4687 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
76.0000 19.0460 m
70.8000 19.0460 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
newpath
44.5937 25.7031 m
44.5937 25.1718 l
45.7395 24.8385 46.5338 24.5286 46.9765 24.2421  c
47.4192 23.9557 47.8020 23.5182 48.1250 22.9296  c
48.4479 22.3411 48.6093 21.7447 48.6093 21.1406  c
48.6093 20.2968 48.3046 19.5755 47.6953 18.9765  c
47.0859 18.3776 46.3281 18.0781 45.4218 18.0781  c
44.0052 18.0781 42.8020 18.8229 41.8125 20.3125  c
41.2500 20.1250 l
41.9791 18.4375 42.9114 17.1692 44.0468 16.3203  c
45.1822 15.4713 46.4479 15.0468 47.8437 15.0468  c
49.2604 15.0468 50.4322 15.4817 51.3593 16.3515  c
52.2864 17.2213 52.7500 18.2343 52.7500 19.3906  c
52.7500 20.1510 52.5338 20.8828 52.1015 21.5859  c
51.6692 22.2890 50.9947 22.9062 50.0781 23.4375  c
51.2656 24.0104 52.1692 24.7187 52.7890 25.5625  c
53.4088 26.4062 53.7187 27.4635 53.7187 28.7343  c
53.7187 30.8697 52.9427 32.6875 51.3906 34.1875  c
49.8385 35.6875 47.7604 36.4375 45.1562 36.4375  c
43.4270 36.4375 42.1614 36.1510 41.3593 35.5781  c
40.7864 35.1718 40.5000 34.6510 40.5000 34.0156  c
40.5000 33.5572 40.6666 33.1640 41.0000 32.8359  c
41.3333 32.5078 41.7187 32.3437 42.1562 32.3437  c
42.4895 32.3437 42.8020 32.4114 43.0937 32.5468  c
43.2500 32.6302 43.8203 33.0729 44.8046 33.8750  c
45.7890 34.6770 46.7083 35.0781 47.5625 35.0781  c
48.3125 35.0781 48.9557 34.7838 49.4921 34.1953  c
50.0286 33.6067 50.2968 32.8541 50.2968 31.9375  c
50.2968 30.5625 49.8125 29.2916 48.8437 28.1250  c
47.8750 26.9583 46.4583 26.1510 44.5937 25.7031  c
h
69.8593 25.7343 m
69.8593 27.7864 69.5729 29.6979 69.0000 31.4687  c
68.6562 32.5625 68.1953 33.4583 67.6171 34.1562  c
67.0390 34.8541 66.3802 35.4062 65.6406 35.8125  c
64.9010 36.2187 64.0989 36.4218 63.2343 36.4218  c
62.2447 36.4218 61.3515 36.1692 60.5546 35.6640  c
59.7578 35.1588 59.0520 34.4375 58.4375 33.5000  c
57.9895 32.8125 57.5989 31.9010 57.2656 30.7656  c
56.8385 29.2239 56.6250 27.6302 56.6250 25.9843  c
56.6250 23.7552 56.9375 21.7031 57.5625 19.8281  c
58.0729 18.2864 58.8541 17.1041 59.9062 16.2812  c
60.9583 15.4583 62.0677 15.0468 63.2343 15.0468  c
64.4218 15.0468 65.5338 15.4531 66.5703 16.2656  c
67.6067 17.0781 68.3645 18.1718 68.8437 19.5468  c
69.5208 21.4322 69.8593 23.4947 69.8593 25.7343  c
h
65.2031 25.7031 m
65.2031 22.1093 65.1822 20.0156 65.1406 19.4218  c
65.0364 18.0260 64.7968 17.0781 64.4218 16.5781  c
64.1614 16.2552 63.7500 16.0937 63.1875 16.0937  c
62.7500 16.0937 62.4062 16.2135 62.1562 16.4531  c
61.7812 16.8072 61.5286 17.4322 61.3984 18.3281  c
61.2682 19.2239 61.2031 22.3385 61.2031 27.6718  c
61.2031 30.5781 61.3072 32.5260 61.5156 33.5156  c
61.6614 34.2343 61.8750 34.7135 62.1562 34.9531  c
62.4375 35.1927 62.8125 35.3125 63.2812 35.3125  c
63.7812 35.3125 64.1614 35.1510 64.4218 34.8281  c
64.8385 34.2656 65.0781 33.3958 65.1406 32.2187  c
65.2031 25.7031 l
h
f
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
